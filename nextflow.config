/*
Copyright (c) 2020 Bisrat J. Debebe

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// Could use for < 50bp , ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/NA12878_HG001/latest/GRCh38/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_PGandRTGphasetransfer.vcf.gz

params {
	// Input fastq
	reads = null
	ref = null
	sra = null
	regions = null
	goldSet = null

	// Alignment Options
	align_extra = ''
	windowSize = 10
	lowQualSupport = 2

	// Output and Run Options
	max_cpus = 5
	max_memory = '10.GB'
	outdir = './output'
	name = null
	alignThreads = 4
	tmpDir = "/tmp"


	if (params.name) {
	tracedir = "${params.outdir}/${params.name}/run_metrics"
	} else { 
	tracedir = "${params.outdir}/run_metrics"
	}

	// Sniffles Defaults
	snifflesMinSupport = 10
	snifflesMinLength = 50
	snifflesMinSeqSize = 2000
	snifflesGenotype = true
	snifflesCluster = true
	snifflesClusterSupport = 2
	snifflesAdvanced = ""

	// SVIM Defaults
	svimFilter ="FILTER=='PASS' && (SVLEN < -50 || SVLEN > 50) && QUAL > 10" 

	// Intersect Settings
	isecDist = 500
	callerSupport = 2
	sameStrand = true
	sameType = true
	estDist = false
	isecMinLength = 50

}

/* includeConfig 'conf/base.cfg' */

timeline {
	enabled = true
	file = "${params.tracedir}/runtime.html"
}

report {
	enabled = true
	file = "${params.tracedir}/report.html"
}

trace {
	enabled = true
	file = "${params.tracedir}/trace.txt"
}

dag {
	enabled = true
	file = "${params.tracedir}/dag.svg"
}

manifest {
	name = 'bjohnnyd/nf-nanosv'
	author = 'Johnny Debebe'
	homePage = 'https://github.com/bjohnnyd/nf-nanosv'
	description = 'Standard SV calling workflow for Nanopore data'
	mainScript = 'main.nf'
	nextflowVersion = '>=20.04.1'
	version = '0.1.0'
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

profiles {
  conda { process.conda = "${baseDir}/env.yml" }
  test { includeConfig 'conf/test.cfg' } 
  prom { includeConfig 'conf/prom.cfg' } 
  prom_NA12878 { includeConfig 'conf/prom_NA12878.cfg' } 
  prom_NB04 { includeConfig 'conf/prom_NB04.cfg' } 
}

process { 
	withName: alignReads {
		cpus = { check_max (params.alignThreads, 'cpus') }
	}

	cpus = 4
	memory = 10.GB
	

}

/* CREDIT: function taken from nf-core/rnaseq  */
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
